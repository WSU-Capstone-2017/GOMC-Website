$.widget("navspy",
    {
        options:
        {
            top: 0,
            bottom: 10,
            bottomOut: true
        },
        widgetEventPrefix: "navspy:",
        active: null,
        paused: false,
        inBounds: false,
        max: null,
        min: null,
        last: null,
        _create: function () {
            this.element.uniqueId();
            this.uid = this.element.attr("id");
            this._setOptions(
                {
                    top: this.options.top,
                    bottom: this.options.bottom,
                    bottomOut: this.options.bottomOut
                });
            this._addListeners();
            this.refresh()
        },
        refresh: function ()
        {
            this.targets = {};
            this._setTargets();
            this._setBounds();
            this._scrollCheck()
        },
        _setTargets: function ()
        {
            var e = this,
                t = this.element.find("[data-spy-on]").length - 1;
            this.element.find("[data-spy-on]").each(function (n, r)
            {
                var i = "#" + $(this).attr("id"),
                    s = $(this).data("spy-on");
                if ($(s).filter(":visible").length)
                {
                    e.targets[i] = {}
                }
                if (n == t)
                {
                    e.last = i
                }
            })
        },
        _addListeners: function ()
        {
            var e = this; $(window).on("scroll.navspy." + this.uid, function ()
            {
                e._scrollCheck()
            });
            $(window).on("resize.navspy." + this.uid, function ()
            {
                e.refresh()
            })
        },
        _destroy: function ()
        {
            this._trigger("destroy", null, [this.element]);
            $(window).off("scroll.navspy." + this.uid);
            $(window).off("resize.navspy." + this.uid)
        },
        _setMinMax: function (e)
        {
            if (e.top < this.min || this.min == null)
            {
                this.min = e.top
            }
            if (e.bottom > this.max || this.max == null)
            {
                this.max = e.bottom
            }
        },
        _setBounds: function ()
        {
            for (var e in this.targets)
            {
                this.targets[e] = this._getSize(e);
                this._setMinMax(this.targets[e])
            }
        },
        _getSize: function (e)
        {
            var t = $($(e).data("spy-on")),
                n = Math.floor(t.offset().top - this.options.top),
                r = Math.floor(n + t.outerHeight() - this.options.bottom);
            return { top: n, bottom: r }
        },
        _scrollCheck: function ()
        {
            if (this.paused) { return false } var e = $(window).scrollTop();
            if (!this._within(e, this.min, this.max))
            {
                this.active && this.exit()
            }
            else
            {
                !this.inBounds && this.enter();
                if (!this.options.bottomOut || !this._bottomOut(e))
                {
                    for (var t in this.targets)
                    {
                        var n = this._maybeActivate(t, e);
                        if (n) break
                    }
                }
            }
        },
        _maybeActivate: function (e, t)
        {
            if (this._within(t, this.targets[e].top, this.targets[e].bottom))
            {
                !this._isActive(e) && this.deactivate(this.active);
                !this._isActive(e) && this.activate(e);
                return true
            }
            return false
        },
        _within: function (e, t, n)
        {
            return t <= e && e <= n
        },
        _isActive: function (e)
        {
            return this.active === e
        },
        _bottomOut: function (e)
        {
            if (e + window.innerHeight >= $(document).height() && e < this.max)
            {
                !this._isActive(this.last) && this.deactivate(this.active);
                !this._isActive(this.last) && this.activate(this.last);
                return true
            }
            return false
        },
        deactivate: function (e)
        {
            this._trigger("deactivate", null, [$(e)]);
            this.element.find(".active").removeClass("active");
            this.active = null
        },
        activate: function (e)
        {
            this._trigger("activate", null, [$(e)]);
            $(e).addClass("active");
            this.active = e
        },
        enter: function ()
        {
            this.inBounds = true; this._trigger("enter", null)
        },
        exit: function ()
        {
            this.deactivate(this.active);
            this.inBounds = false; this._trigger("exit", null)
        },
        pause: function ()
        {
            this.paused = true
        },
        unpause: function ()
        {
            this.paused = false; this._scrollCheck()
        }
    })